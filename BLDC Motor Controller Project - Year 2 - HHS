#include "pico/stdlib.h"
#include <stdio.h>
#include "hardware/pwm.h"
#include "hardware/clocks.h"
#include "hardware/gpio.h"
#include "hardware/adc.h"
#include <stdlib.h>
#include <string.h>
#include "hardware/i2c.h"
#include "pico/binary_info.h"


const int LCD_CLEARDISPLAY = 0x01;
const int LCD_RETURNHOME = 0x02;
const int LCD_ENTRYMODESET = 0x04;
const int LCD_DISPLAYCONTROL = 0x08;
const int LCD_CURSORSHIFT = 0x10;
const int LCD_FUNCTIONSET = 0x20;
const int LCD_SETCGRAMADDR = 0x40;
const int LCD_SETDDRAMADDR = 0x80;

// flags for display entry mode
const int LCD_ENTRYSHIFTINCREMENT = 0x01;
const int LCD_ENTRYLEFT = 0x02;

// flags for display and cursor control
const int LCD_BLINKON = 0x01;
const int LCD_CURSORON = 0x02;
const int LCD_DISPLAYON = 0x04;

// flags for display and cursor shift
const int LCD_MOVERIGHT = 0x04;
const int LCD_DISPLAYMOVE = 0x08;

// flags for function set
const int LCD_5x10DOTS = 0x04;
const int LCD_2LINE = 0x08;
const int LCD_8BITMODE = 0x10;

// flag for backlight control
const int LCD_BACKLIGHT = 0x08;

const int LCD_ENABLE_BIT = 0x04;

// By default these LCD display drivers are on bus address 0x27
static int addr = 0x27;

// Modes for lcd_send_byte
#define LCD_CHARACTER  1
#define LCD_COMMAND    0

#define MAX_LINES      2
#define MAX_CHARS      16

// PWM instellingen
#define PWM_FREQ 40000  // 20 kHz PWM-frequentie 

// GPIO pinnen voor de fasen (H-brug)
#define PHASE_UH 20
#define PHASE_UL 21
#define PHASE_VH 16
#define PHASE_VL 17
#define PHASE_WH 18
#define PHASE_WL 19

// Hall sensor ingangen
#define HALL_A 2
#define HALL_B 3
#define HALL_C 4


uint32_t wrap_value;  // Globale waarde voor PWM wrap

volatile uint32_t revolution_count = 0;
volatile uint32_t rpm = 0;
int last_hall_state = -1;

void i2c_write_byte(uint8_t val) {
#ifdef i2c_default
    i2c_write_blocking(i2c_default, addr, &val, 1, false);
#endif
}

void lcd_toggle_enable(uint8_t val) {
    // Toggle enable pin on LCD display
    // We cannot do this too quickly or things don't work
#define DELAY_US 600
    sleep_us(DELAY_US);
    i2c_write_byte(val | LCD_ENABLE_BIT);
    sleep_us(DELAY_US);
    i2c_write_byte(val & ~LCD_ENABLE_BIT);
    sleep_us(DELAY_US);
}

// The display is sent a byte as two separate nibble transfers
void lcd_send_byte(uint8_t val, int mode) {
    uint8_t high = mode | (val & 0xF0) | LCD_BACKLIGHT;
    uint8_t low = mode | ((val << 4) & 0xF0) | LCD_BACKLIGHT;

    i2c_write_byte(high);
    lcd_toggle_enable(high);
    i2c_write_byte(low);
    lcd_toggle_enable(low);
}

void lcd_clear(void) {
    lcd_send_byte(LCD_CLEARDISPLAY, LCD_COMMAND);
}

// go to location on LCD
void lcd_set_cursor(int line, int position) {
    int val = (line == 0) ? 0x80 + position : 0xC0 + position;
    lcd_send_byte(val, LCD_COMMAND);
}

static inline void lcd_char(char val) {
    lcd_send_byte(val, LCD_CHARACTER);
}

void lcd_string(const char *s) {
    while (*s) {
        lcd_char(*s++);
    }
}

void lcd_init() {
    lcd_send_byte(0x03, LCD_COMMAND);
    lcd_send_byte(0x03, LCD_COMMAND);
    lcd_send_byte(0x03, LCD_COMMAND);
    lcd_send_byte(0x02, LCD_COMMAND);

    lcd_send_byte(LCD_ENTRYMODESET | LCD_ENTRYLEFT, LCD_COMMAND);
    lcd_send_byte(LCD_FUNCTIONSET | LCD_2LINE, LCD_COMMAND);
    lcd_send_byte(LCD_DISPLAYCONTROL | LCD_DISPLAYON, LCD_COMMAND);
    lcd_clear();
}



// PWM instellen voor een bepaalde GPIO
void setup_pwm(uint gpio) {
    gpio_set_function(gpio, GPIO_FUNC_PWM);
    uint slice = pwm_gpio_to_slice_num(gpio);
    pwm_config config = pwm_get_default_config();
    pwm_config_set_clkdiv(&config, 1.0f);
    uint32_t sys_clk = clock_get_hz(clk_sys);
    wrap_value = (sys_clk / PWM_FREQ); // Wrap waarde ook voor ander gebruik
    pwm_config_set_wrap(&config, wrap_value);
    pwm_config_set_phase_correct(&config, true);
    pwm_init(slice, &config, false); // zodat de PWM niet direct start
}

// PWM duty cycle instellen
void set_pwm_duty(uint gpio, float duty_cycle) {
    uint slice = pwm_gpio_to_slice_num(gpio);
    uint channel = pwm_gpio_to_channel(gpio);
    uint32_t level = wrap_value * duty_cycle;
    pwm_set_chan_level(slice, channel, level);
}

// Alle fasen uitschakelen (veiligheidsfunctie)
void stop_all_phases() {
    uint slice;

    slice = pwm_gpio_to_slice_num(PHASE_UH);
    pwm_set_both_levels(slice, 0, 0);
    pwm_set_output_polarity(slice, false, false); 

    slice = pwm_gpio_to_slice_num(PHASE_VH);
    pwm_set_both_levels(slice, 0, 0);
    pwm_set_output_polarity(slice, false, false); 

    slice = pwm_gpio_to_slice_num(PHASE_WH);
    pwm_set_both_levels(slice, 0, 0);
    pwm_set_output_polarity(slice, false, false); 
}

// Dead-time instellen en fase inschakelen
void set_phase(uint high, uint low, uint HL) {
    stop_all_phases();  
    uint16_t raw = adc_read();  //Lees ADC waarde (0-4095)
    float MAX_DUTY = raw / 4095.0 * 0.3;  // Converteer naar dutycyle

    pwm_set_output_polarity(pwm_gpio_to_slice_num(high), false, true);
    set_pwm_duty(low, 1);
    set_pwm_duty(high, MAX_DUTY);
    set_pwm_duty(HL, MAX_DUTY + 0.03);
}

// Hall sensoren lezen
int read_hall() {
    return (gpio_get(HALL_C) << 2) | (gpio_get(HALL_B) << 1) | gpio_get(HALL_A);
}

// BLDC-motor fasen schakelen op basis van Hall-sensor input
void update_motor() {
    int hall_state = read_hall();

      // Only increment on rising edge into 0b110
    if (hall_state == 0b110 && last_hall_state != 0b110) {
        revolution_count++;
    }

    last_hall_state = hall_state;  // Update the previous state

    switch (hall_state) {
        case 0b110:
            set_phase(PHASE_UH, PHASE_VL, PHASE_UL);
            break;
        case 0b100:
            set_phase(PHASE_UH, PHASE_WL, PHASE_UL);
            break;
        case 0b101:
            set_phase(PHASE_VH, PHASE_WL, PHASE_VL);
            break;
        case 0b001:
            set_phase(PHASE_VH, PHASE_UL, PHASE_VL);
            break;
        case 0b011:
            set_phase(PHASE_WH, PHASE_UL, PHASE_WL);
            break;
        case 0b010:
            set_phase(PHASE_WH, PHASE_VL, PHASE_WL);
            break;
        default:
        stop_all_phases(); 
            break;
    }
}

int main() {
    // Hall sensors initialiseren
    gpio_init(HALL_A);
    gpio_init(HALL_B);
    gpio_init(HALL_C);
    gpio_set_dir(HALL_A, GPIO_IN);
    gpio_set_dir(HALL_B, GPIO_IN);
    gpio_set_dir(HALL_C, GPIO_IN);

    adc_init();           // Initialiseer ADC
    adc_gpio_init(26);    // Gebruik GPIO 26 (ADC0)
    adc_select_input(0);  // Selecteer ADC kanaal 0 (GPIO 26)

    // PWM configureren zonder ze te starten
    setup_pwm(PHASE_UH);
    setup_pwm(PHASE_UL);
    setup_pwm(PHASE_VH);
    setup_pwm(PHASE_VL);
    setup_pwm(PHASE_WH);
    setup_pwm(PHASE_WL);

    // Wacht een korte tijd om de configuratie stabiel te maken
    sleep_ms(10);

    // Haal slice nummers op en start alle PWM tegelijk
    pwm_set_mask_enabled(
        (1 << pwm_gpio_to_slice_num(PHASE_UH)) |
        (1 << pwm_gpio_to_slice_num(PHASE_UL)) |
        (1 << pwm_gpio_to_slice_num(PHASE_VH)) |
        (1 << pwm_gpio_to_slice_num(PHASE_VL)) |
        (1 << pwm_gpio_to_slice_num(PHASE_WH)) |
        (1 << pwm_gpio_to_slice_num(PHASE_WL))
    );
 
    absolute_time_t last_rpm_time = get_absolute_time();

  //  #if !defined(i2c_default) || !defined(PICO_DEFAULT_I2C_SDA_PIN) || !defined(PICO_DEFAULT_I2C_SCL_PIN)
   // #warning i2c/lcd_1602_i2c example requires a board with I2C pins
   // #else
    // This example will use I2C0 on the default SDA and SCL pins (4, 5 on a Pico)
    i2c_init(i2c_default, 100 * 1000);
    const bool onzeSDApin=0;
    const bool onzeSCLPin=1;
    gpio_set_function(onzeSDApin, GPIO_FUNC_I2C);
    gpio_set_function(onzeSCLPin, GPIO_FUNC_I2C);
    gpio_pull_up(onzeSDApin);
    gpio_pull_up(onzeSCLPin);
    // Make the I2C pins available to picotool
    bi_decl(bi_2pins_with_func(PICO_DEFAULT_I2C_SDA_PIN, PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C));

    lcd_init();
    
    char numSTR[20];

    while (1) {
    update_motor();  // Check HALL sensors and commutate the motor
    snprintf(numSTR, sizeof(numSTR),"%d",rpm);
    lcd_string(numSTR);  // Print current RPM
    lcd_set_cursor(0,4);
    // Check if 1 second has passed
    if (absolute_time_diff_us(last_rpm_time, get_absolute_time()) > 1000000) {
        rpm = (revolution_count * 60);  // Convert to RPM
        revolution_count = 0;                        // Reset for next interval
        last_rpm_time = get_absolute_time();         // Reset timer
    }

     

    sleep_ms(1);  // Optional: slow down loop a bit
    }
    //endif
}
